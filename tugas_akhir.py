# -*- coding: utf-8 -*-
"""Tugas_Akhir.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Ybrfd8xC-33AUHosxdSIBLRM1AJV_3y

# Import Data
"""

!git clone https://github.com/donatkukus/data.git

import pandas as pd

df = pd.read_excel('data/data_text.xls')

d1 = df[143:158]
d0 = df[598:613]

d1.to_dict()['tweet']

d0.to_dict()['tweet']

comb = [d1,d0]
df = pd.concat(comb)

df = df.to_dict()

"""# Preprocessing"""

!pip install nltk
!pip install Sastrawi

from nltk.corpus import stopwords

def stopword(doct):
  nltk.download('stopwords')
  stopword = list(stopwords.words('indonesian'))
  for key in doct.keys():
    for word in doct[key]:
      if word in stopword:
        doct[key].remove(word)

  return doct

from Sastrawi.Stemmer.StemmerFactory import StemmerFactory
import re
def stem(doct):
  
  #create stemmer
  factory = StemmerFactory()
  stemmer = factory.create_stemmer()
  for key in doct.keys():
    doct[key] = stemmer.stem(doct[key])
    doct[key] = re.sub(r"\d+","",doct[key])
  return doct

df['tweet'] = stopword(df['tweet'])

df['tweet']

df['tweet'] = stem(df['tweet'])

df['tweet']

df = pd.DataFrame.from_dict(df)

"""# Naive bayes

# Fungsi untuk menghitung jumlah term
"""

def word(doc):
  term = []
  
  for key in doc.keys():
    temp = doc[key].split()
    for w in temp:
      if w not in term:
        term.append(w)


  return term

"""# Fungsi untuk menghitung jumlah term pada suatu dokumen"""

def count(term,label,tabel_term,term1,term0,dic1,dic0):
   counter = 0
   index = tabel_term['Term'].index(term)
   exist = True
   if label == 1 and term not in term1:
     return 0
   elif label == 0 and term not in term0:
     return 0  
   for key in tabel_term['Tf'].keys():
     if label==1:
       if key in dic1['tweet'].keys():
         counter = counter+tabel_term['Tf'][key][index]
     elif label==0:
       if key in dic0['tweet'].keys():
         counter = counter+tabel_term['Tf'][key][index]

   return counter

"""# Fungsi untuk menghitung jumlah term pada suatu kelas"""

def count_class(label,tabel_term,dic1,dic0):
  counter = 0
  for k in tabel_term['Total'].keys():
    if label == 1 and k in dic1['tweet'].keys():
      counter = counter + tabel_term['Total'][k]
    elif label == 0 and k in dic0['tweet'].keys():
      counter = counter + tabel_term['Total'][k]

  return counter

"""# Fungsi untuk menghitung posterior"""

def posterior(tabel_term,term1,term0,dic1,dic0):
  posterior = {}
  temp_pos = []
  for x in tabel_term['Term']:
   temp = count(x,1,tabel_term,term1,term0,dic1,dic0)+1
   temp = temp / (count_class(1,tabel_term,dic1,dic0)+len(tabel_term['Term']))
   temp_pos.append(temp) 
   temp = count(x,0,tabel_term,term1,term0,dic1,dic0)+1
   temp = temp / (count_class(0,tabel_term,dic1,dic0)+len(tabel_term['Term']))
   temp_pos.append(temp)
   posterior[x] = temp_pos
   temp_pos = []
  
    
  
  return posterior

"""# Fungsi training Naive bayes"""

def train(df):

  dic1 = {'label':{},'tweet':{}}
  dic0 = {'label':{},'tweet':{}}
  for x in df['label'].keys():
    if df['label'][x] == 1:
      dic1['label'][x] = 1
      dic1['tweet'][x] = df['tweet'][x]
    elif df['label'][x]==0:
      dic0['label'][x] = 0
      dic0['tweet'][x] = df ['tweet'][x]

  term1 = word(dic1['tweet'])
  term0 = word(dic0['tweet'])

  term = list(set(term1+term0))
  tabel_term = {'Term':term,
               'Tf':{},'Total':{}}

  for k in dic1['tweet'].keys():
   tabel_term['Tf'][k] = [0 for i in range(len(tabel_term['Term']))] 
  for k in dic0['tweet'].keys():
   tabel_term['Tf'][k]= [0 for i in range(len(tabel_term['Term']))]

  #menghitung tf per dokumen
  for k in tabel_term['Tf'].keys():
    if k>=143 and k<=158:
      for i in range(len(tabel_term['Term'])):
        temp = tabel_term['Term'][i]
        tabel_term['Tf'][k][i] = dic1['tweet'][k].split().count(temp)
    elif k>=598 and k<=614:
      for i in range(len(tabel_term['Term'])):
        temp = tabel_term['Term'][i]
        tabel_term['Tf'][k][i] = dic0['tweet'][k].split().count(temp) 
  #menghitung total term per dokumen
  for x in tabel_term['Tf'].keys():
    tabel_term['Total'][x] = sum(tabel_term['Tf'][x])

  res = posterior(tabel_term,term1,term0,dic1,dic0)


  return res

"""# Fungsi testing model"""

def test(model,df):
  predict = {'label':{}}
  temp = ""
  res1 = 0.5
  res0 = 0.5
  for k in df['tweet'].keys():
    temp = df['tweet'][k].split()
    
    for t in temp:
      if t in model.keys():
        res1 = res1*model[t][0]
    for t in temp:
      if t in model.keys():
        res0 = res0*model[t][1]    
    if res1>res0:
      predict['label'][k] = 1
    else:
      predict['label'][k] = 0

  return predict

"""# Fungsi untuk menghitung akurasi"""

def accuracy(test,df):
  c=0
  for i in range(len(test['label'])):
    if list(test['label'].values())[i] == list(df['label'].values())[i]:
      c = c+1
  acc = c/len(test['label'])
  
  print('Accuracy = ',c/len(test['label']))  
  return acc

"""# Fungsi untuk menghitung akurasi dengan Fold = 5"""

def test_all(df,fold = 5):
  x = len(df)
  start = 0
  acc = []
  for i in range(fold):
    end = start +  int(x/fold)
    
    df_train = df.iloc[start:end]
    df_test = df.drop(df_train.index)
    print(df_train)
    print(df_test)
    df_train = df_train.to_dict()
    df_test = df_test.to_dict()
    model = train(df_train)
    tes = test(model,df_test)
    acc.append(accuracy(tes,df_test))
    start = end

  print('Average Accuracy = ',sum(acc)/len(acc))

test_all(df)